createdAt: "2020-01-19T11:36:49.291Z"
updatedAt: "2020-01-19T17:07:33.266Z"
type: "MARKDOWN_NOTE"
folder: "32a2e213603400f3850a"
title: "8. Базовые свойства CSS (больше)"
tags: [
  "css"
  "web"
]
content: '''
  # 8. Базовые свойства CSS (больше)
  
  ```css
  body
  {
    background-color: gray;
  }
  ```
  
  Если мы применим свойство к тегу `<body></body>`, то оно применится **к всему тегу**. Тут мы плавно подошли к **наследованию**.
  
  ## Наследование
  
  Если мы разместим элемент `<h1></h1>` в теге `<body></body>`, то если у `<h1></h1>` нет никаких своих свойств, он унаследует свойства `<body></body>`
  
  ```html
  <html>
    <head>
      <style>
        
      </style>
    </head>
    <body>
      <h1>Inherit!</h1>
    </body>
  </html>
  ```
  
  ## Приоритет
  
  1. Внутренний атрибут `style=""`
  2. Идентификатор, который используется в стиле
  3. Последний присвоенный класс
  4. Первый присвоенный класс (*и единственный*)
  
  1 приоритет - самый высокий приоритет, 4 - самый низкий приоритет
  
  Например:
  
  ```html
  <h1 class="class1 class2" id="color-color"></h1>
  ```
  
  `Пусть и классы, и идентификаторы содержат цвета.`
  Несмотря на то, что и классы, и идентфикаторы содержат цвета, цвет у элемента `<h1></h1>` будет тот, который прописан в `#color-color`
  
  Во многих случаях мы будем использовать CSS библиотеки. Они могут заменить стили наших элементов. Чтобы быть уверенным, что свойство не изменится нужно дописать в свойстве `!important`
  
  ```css
  h1 {
  color: green;
  text-align: center;
  }
  
  another-h1-class{
  color: gray;
  text-align: right;
  }
  h1-class {
  color: brown !important;
  text-align: left;
  }
  ```
  
  ```html
  <h1 class="h1-class another-h1-class">Текст_текст</h1>
  ```
  
  
  Теперь, h1 будет выводиться справа (*потому что класс важнее чем, свойства общего элемента*), а цвет у него будет коричневый (*несмотря на то, что класс `another-h1-class` стоит последним, у `h1-class` свойство `color` помечено `!important`*)
  
  ## Немного о цветах
  
  Цвет можно выбрать с помощью разных систем:
  
  * RGB
  * HEX
  * HSL
  
  ### HEX
  Цветовая схема по шестнадцатиричным числам, где #000000 - черный цвет, а #FFFFFF - белый цвет. Также, код цвета можно сократить до 3 чисел.
  
  ### RGB
  Представляет из себя цветовую схему, где каждый цвет - вектор из 3 координат (*Red Green Blue*) (Красный Зелёный Голубой)
  
  ### HSL
  Представляет из себя дополненную систему RGB. Четвёртая координата отвечает за прозрачность
  
  ## Переменные CSS
  
  Переменные в **CSS** вводятся через двойной дефис, а потом используются с функцией `var(--имя_переменной)`
  
  ```css
  --color-border
  
  h1 {
  border: 5px solid var(--color-border, black)
  /* Второе значение дается для того, если переменная не определена */
  }
  ```
  
  Переменные тоже наследуются из класса в класс, поэтому переменную **не** всегда можно достать в каждом классе.
  Чтобы переменная была объявлена *глобально*, её нужно объявить в псевдо-классе `:root`
  
  ```css
    :root {
    --background-color-img: black;
    /* Эта переменная будет доступна везде */
    }
    ```
  
  Если объявить переменную в каком-то классе, то она будет доступна **только в этом классе (да, инкапсуляция)**
  
  ```css
  .newclass
  --bg: white;
  /* Переменная будет доступна только в классе .newclass */
  ```
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
