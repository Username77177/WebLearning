createdAt: "2020-01-24T08:07:40.296Z"
updatedAt: "2020-01-24T10:21:32.565Z"
type: "MARKDOWN_NOTE"
folder: "32a2e213603400f3850a"
title: "15. Flexbox'ы"
tags: [
  "css"
  "flexbox"
  "html"
  "web"
]
content: '''
  # 15. Flexbox'ы
  
  `flexbox` - ещё один метод разметки в **CSS3**.
  Чтобы элемент вёл себя как `flexbox`, нужно указать особенность отображения элемента (типа элемента)
  
  ```css
  .box {
    display: flex;
  }
  ```
  
  Добавление `display:flex;` к элементу превращает его в *flex-контейнер*. Это позволяет выровнять любые дочерние элементы этого элемента в строки или столбцы. Выравнивать в столбцы или строки можно, добавляя свойство `flex-direction` к родительскому элементу и устанавливая его `row`, `column` или `row-reverse`, `column-reverse`. Создание строки будет выравнивать дочерние элементы по горизонтали, а создание столбца выравнивает дочерние по вертикали.
  
  ```css
  .box {
    display: flex;
    flex-direction: row;
  }
  ```
  
  Иногда элементы внутри гибкого контейнера не заполняют все пространство в нём. К счастью есть свойство `justify-content`
  
  Самый используемый `justify-content: center;`  - центрирует контент
  
  **Рассмотрим все варианты выравнивания**
  
  * `flex-start`: выравнивает элементы по началу `flex`-контейнера. Для строки (ряда) это свойство выталкивает элементы направо от начала контейнера. Для столбца это помещает элементы вверх контейнера. Это выравнивание указано по умолчанию, если не указано `justify-content`.
  *  `flex-end`: выравнивает элементы по концу `flex`-контейнера. Для строки `ряда` это подталкивает элементы справа налево от конца контейнера. Для столбца это помещает *новые* элементы в нижнюю часть контейнера.
  *  `space-between`: выравнивает элементы по центру главной оси, с дополнительным пространством между элементами. Первый и последний элементы помещаются на самый край гибкого контейнера.
  *  `space-around`: аналогично `space-between`, но первый и последний элементы не привязаны к краям контейнера, пространство распределено вокруг всех элементов а элементы находятся чуть отдалившись от краев гибкого контейнера.
  *  `space-evenly`: равномерно распределяет пространство между гибкими элементами с полным пространством на обоих концах гибкого контейнера
  
  `align-items` делает то же самое что и `justify-content`, только по оси `y` (принимает он, кстати те же самые значения)
  
  `flex-wrap` - переносит элементы, если их ширина больше нежели ширина страницы, однако они все в одной строке или столбце из-за `position:flex;`
  
  Принимает значения:
  
  * `wrap` - перенести элементы на следующую строку или столбец
  * `nowrap` - **не** переносить элементы на следующую строку или столбец
  * `wrap-reverse` - перенести элементы в обратном порядке
  
  `flex-shrink` - обрезать элемент на какую-либо часть (*принимает значения 1,2,3 и далее (например: оставить 1/3 от исходного: `flex-shrink:3`)*)
  
  `flex-grow` - на сколько элемент вырастет (обратная функция к `flex-shrink`)
  
  `flex-basis` - устанавливает размер элементов до того, как с ними будут произведены две операции, что перечислены выше
  
  ```css
  flex-basis: 10px;
  ```
  
  `flex` - совмещает `flex-basis flex-shrink flex-grow`
  
  `order` - указывает очередь по которой идут элементы (принимает значения 1,2,3, и далее)
  
  `align-self` - указывает где будет находиться элемент из flexbox. Принимает значения `flex-start`, `flex-end`, `center`
'''
linesHighlighted: []
isStarred: false
isTrashed: false
